//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g 2017-10-02 14:18:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  BalajiK.ParserTest 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class SimpleCalcParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "DIGIT", "DIV", "MINUS", "MULT", "NUMBER", "PLUS", "WHITESPACE"
	};
	public const int EOF=-1;
	public const int DIGIT=4;
	public const int DIV=5;
	public const int MINUS=6;
	public const int MULT=7;
	public const int NUMBER=8;
	public const int PLUS=9;
	public const int WHITESPACE=10;

	public SimpleCalcParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SimpleCalcParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SimpleCalcParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:21:1: expr : term ( ( PLUS | MINUS ) term )* ;
	[GrammarRule("expr")]
	private void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 1);
		TraceIn("expr", 1);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(21, 43);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:21:9: ( term ( ( PLUS | MINUS ) term )* )
			DebugEnterAlt(1);
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:21:11: term ( ( PLUS | MINUS ) term )*
			{
			DebugLocation(21, 11);
			PushFollow(Follow._term_in_expr113);
			term();
			PopFollow();

			DebugLocation(21, 16);
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:21:16: ( ( PLUS | MINUS ) term )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MINUS||LA1_1==PLUS))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:21:18: ( PLUS | MINUS ) term
					{
					DebugLocation(21, 18);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(21, 36);
					PushFollow(Follow._term_in_expr128);
					term();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 1);
			LeaveRule("expr", 1);
			LeaveRule_expr();
		}
		DebugLocation(21, 43);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"

	partial void EnterRule_term();
	partial void LeaveRule_term();
	// $ANTLR start "term"
	// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:23:1: term : factor ( ( MULT | DIV ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 2);
		TraceIn("term", 2);
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(23, 44);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:23:9: ( factor ( ( MULT | DIV ) factor )* )
			DebugEnterAlt(1);
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:23:11: factor ( ( MULT | DIV ) factor )*
			{
			DebugLocation(23, 11);
			PushFollow(Follow._factor_in_term144);
			factor();
			PopFollow();

			DebugLocation(23, 18);
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:23:18: ( ( MULT | DIV ) factor )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==DIV||LA2_1==MULT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:23:20: ( MULT | DIV ) factor
					{
					DebugLocation(23, 20);
					if (input.LA(1)==DIV||input.LA(1)==MULT)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(23, 35);
					PushFollow(Follow._factor_in_term158);
					factor();
					PopFollow();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("term", 2);
			LeaveRule("term", 2);
			LeaveRule_term();
		}
		DebugLocation(23, 44);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"

	partial void EnterRule_factor();
	partial void LeaveRule_factor();
	// $ANTLR start "factor"
	// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:25:1: factor : NUMBER ;
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 3);
		TraceIn("factor", 3);
		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(25, 17);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:25:9: ( NUMBER )
			DebugEnterAlt(1);
			// D:\\repos\\playground\\TreeExperiments\\Antlr\\SimpleCalc.g:25:11: NUMBER
			{
			DebugLocation(25, 11);
			Match(input,NUMBER,Follow._NUMBER_in_factor172); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("factor", 3);
			LeaveRule("factor", 3);
			LeaveRule_factor();
		}
		DebugLocation(25, 17);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _term_in_expr113 = new BitSet(new ulong[]{0x242UL});
		public static readonly BitSet _set_in_expr117 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _term_in_expr128 = new BitSet(new ulong[]{0x242UL});
		public static readonly BitSet _factor_in_term144 = new BitSet(new ulong[]{0xA2UL});
		public static readonly BitSet _set_in_term148 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _factor_in_term158 = new BitSet(new ulong[]{0xA2UL});
		public static readonly BitSet _NUMBER_in_factor172 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  BalajiK.ParserTest 
