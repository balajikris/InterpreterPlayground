//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g 2017-10-02 17:10:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  ExpressionEvaluator 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class TreeEval : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ID", "INT", "NEWLINE", "WS", "'('", "')'", "'*'", "'+'", "'-'", "'='"
	};
	public const int EOF=-1;
	public const int ID=4;
	public const int INT=5;
	public const int NEWLINE=6;
	public const int WS=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;

	public TreeEval(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public TreeEval(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return TreeEval.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g"; } }


	/** Map variable name to Integer object holding value */
	Dictionary<string, int> memory = new Dictionary<string, int>();


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:19:1: prog : ( stat )+ ;
	[GrammarRule("prog")]
	private void prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(19, 14);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:19:5: ( ( stat )+ )
			DebugEnterAlt(1);
			// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:19:9: ( stat )+
			{
			DebugLocation(19, 9);
			// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:19:9: ( stat )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>=ID && LA1_1<=INT)||(LA1_1>=10 && LA1_1<=13)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:19:9: stat
					{
					DebugLocation(19, 9);
					PushFollow(Follow._stat_in_prog55);
					stat();
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(19, 14);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return;

	}
	// $ANTLR end "prog"

	partial void EnterRule_stat();
	partial void LeaveRule_stat();
	// $ANTLR start "stat"
	// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:21:1: stat : ( expr | ^( '=' ID expr ) );
	[GrammarRule("stat")]
	private void stat()
	{
		EnterRule_stat();
		EnterRule("stat", 2);
		TraceIn("stat", 2);
		CommonTree ID2 = default(CommonTree);
		int expr1 = default(int);
		int expr3 = default(int);

		try { DebugEnterRule(GrammarFileName, "stat");
		DebugLocation(21, 4);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:21:5: ( expr | ^( '=' ID expr ) )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if (((LA2_1>=ID && LA2_1<=INT)||(LA2_1>=10 && LA2_1<=12)))
			{
				alt2 = 1;
			}
			else if ((LA2_1==13))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:21:9: expr
				{
				DebugLocation(21, 9);
				PushFollow(Follow._expr_in_stat66);
				expr1=expr();
				PopFollow();

				DebugLocation(22, 9);
				Console.WriteLine(expr1);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:23:9: ^( '=' ID expr )
				{
				DebugLocation(23, 9);
				DebugLocation(23, 11);
				Match(input,13,Follow._13_in_stat87); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(23, 15);
				ID2=(CommonTree)Match(input,ID,Follow._ID_in_stat89); 
				DebugLocation(23, 18);
				PushFollow(Follow._expr_in_stat91);
				expr3=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(24, 9);
				memory.Add((ID2!=null?ID2.Text:null), expr3);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stat", 2);
			LeaveRule("stat", 2);
			LeaveRule_stat();
		}
		DebugLocation(25, 4);
		} finally { DebugExitRule(GrammarFileName, "stat"); }
		return;

	}
	// $ANTLR end "stat"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:27:1: expr returns [int value] : ( ^( '+' a= expr b= expr ) | ^( '-' a= expr b= expr ) | ^( '*' a= expr b= expr ) | ID | INT );
	[GrammarRule("expr")]
	private int expr()
	{
		EnterRule_expr();
		EnterRule("expr", 3);
		TraceIn("expr", 3);
		int value = default(int);


		CommonTree ID4 = default(CommonTree);
		CommonTree INT5 = default(CommonTree);
		int a = default(int);
		int b = default(int);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(27, 4);
		try
		{
			// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:28:5: ( ^( '+' a= expr b= expr ) | ^( '-' a= expr b= expr ) | ^( '*' a= expr b= expr ) | ID | INT )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case 11:
				{
				alt3 = 1;
				}
				break;
			case 12:
				{
				alt3 = 2;
				}
				break;
			case 10:
				{
				alt3 = 3;
				}
				break;
			case ID:
				{
				alt3 = 4;
				}
				break;
			case INT:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:28:9: ^( '+' a= expr b= expr )
				{
				DebugLocation(28, 9);
				DebugLocation(28, 11);
				Match(input,11,Follow._11_in_expr126); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(28, 16);
				PushFollow(Follow._expr_in_expr130);
				a=expr();
				PopFollow();

				DebugLocation(28, 23);
				PushFollow(Follow._expr_in_expr134);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(28, 31);
				value = a+b;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:29:9: ^( '-' a= expr b= expr )
				{
				DebugLocation(29, 9);
				DebugLocation(29, 11);
				Match(input,12,Follow._12_in_expr149); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(29, 16);
				PushFollow(Follow._expr_in_expr153);
				a=expr();
				PopFollow();

				DebugLocation(29, 23);
				PushFollow(Follow._expr_in_expr157);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(29, 31);
				value = a-b;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:30:9: ^( '*' a= expr b= expr )
				{
				DebugLocation(30, 9);
				DebugLocation(30, 11);
				Match(input,10,Follow._10_in_expr175); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(30, 16);
				PushFollow(Follow._expr_in_expr179);
				a=expr();
				PopFollow();

				DebugLocation(30, 23);
				PushFollow(Follow._expr_in_expr183);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(30, 31);
				value = a*b;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:31:9: ID
				{
				DebugLocation(31, 9);
				ID4=(CommonTree)Match(input,ID,Follow._ID_in_expr197); 
				DebugLocation(32, 9);

							int v;
							if (memory.TryGetValue(((ID4!=null?ID4.Text:null)), out v)) 
							{
								value = v;
							}
							else 
							{
								Console.WriteLine("undefined variable "+(ID4!=null?ID4.Text:null));
							}
				        

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\repos\\playground\\TreeExperiments\\ExpressionEvaluator\\TreeEval.g:43:9: INT
				{
				DebugLocation(43, 9);
				INT5=(CommonTree)Match(input,INT,Follow._INT_in_expr218); 
				DebugLocation(43, 31);
				value = int.Parse((INT5!=null?INT5.Text:null));

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 3);
			LeaveRule("expr", 3);
			LeaveRule_expr();
		}
		DebugLocation(44, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _stat_in_prog55 = new BitSet(new ulong[]{0x3C32UL});
		public static readonly BitSet _expr_in_stat66 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_stat87 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_stat89 = new BitSet(new ulong[]{0x1C30UL});
		public static readonly BitSet _expr_in_stat91 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _11_in_expr126 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr130 = new BitSet(new ulong[]{0x1C30UL});
		public static readonly BitSet _expr_in_expr134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _12_in_expr149 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr153 = new BitSet(new ulong[]{0x1C30UL});
		public static readonly BitSet _expr_in_expr157 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _10_in_expr175 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr179 = new BitSet(new ulong[]{0x1C30UL});
		public static readonly BitSet _expr_in_expr183 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_expr197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expr218 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  ExpressionEvaluator 
